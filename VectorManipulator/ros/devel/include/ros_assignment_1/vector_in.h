// Generated by gencpp from file ros_assignment_1/vector_in.msg
// DO NOT EDIT!


#ifndef ROS_ASSIGNMENT_1_MESSAGE_VECTOR_IN_H
#define ROS_ASSIGNMENT_1_MESSAGE_VECTOR_IN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace ros_assignment_1
{
template <class ContainerAllocator>
struct vector_in_
{
  typedef vector_in_<ContainerAllocator> Type;

  vector_in_()
    : vector()
    , angle()
    , distance(0.0)  {
    }
  vector_in_(const ContainerAllocator& _alloc)
    : vector(_alloc)
    , angle(_alloc)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _vector_type;
  _vector_type vector;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _angle_type;
  _angle_type angle;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::ros_assignment_1::vector_in_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_assignment_1::vector_in_<ContainerAllocator> const> ConstPtr;

}; // struct vector_in_

typedef ::ros_assignment_1::vector_in_<std::allocator<void> > vector_in;

typedef boost::shared_ptr< ::ros_assignment_1::vector_in > vector_inPtr;
typedef boost::shared_ptr< ::ros_assignment_1::vector_in const> vector_inConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_assignment_1::vector_in_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_assignment_1::vector_in_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_assignment_1::vector_in_<ContainerAllocator1> & lhs, const ::ros_assignment_1::vector_in_<ContainerAllocator2> & rhs)
{
  return lhs.vector == rhs.vector &&
    lhs.angle == rhs.angle &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_assignment_1::vector_in_<ContainerAllocator1> & lhs, const ::ros_assignment_1::vector_in_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_assignment_1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_assignment_1::vector_in_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_assignment_1::vector_in_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_assignment_1::vector_in_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_assignment_1::vector_in_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_assignment_1::vector_in_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_assignment_1::vector_in_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_assignment_1::vector_in_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3f752c00d0fcadb1566ee98436f6d75";
  }

  static const char* value(const ::ros_assignment_1::vector_in_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3f752c00d0fcadbULL;
  static const uint64_t static_value2 = 0x1566ee98436f6d75ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_assignment_1::vector_in_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_assignment_1/vector_in";
  }

  static const char* value(const ::ros_assignment_1::vector_in_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_assignment_1::vector_in_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point vector\n"
"geometry_msgs/Point angle\n"
"float64 distance\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ros_assignment_1::vector_in_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_assignment_1::vector_in_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vector);
      stream.next(m.angle);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vector_in_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_assignment_1::vector_in_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_assignment_1::vector_in_<ContainerAllocator>& v)
  {
    s << indent << "vector: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.vector);
    s << indent << "angle: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.angle);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ASSIGNMENT_1_MESSAGE_VECTOR_IN_H
