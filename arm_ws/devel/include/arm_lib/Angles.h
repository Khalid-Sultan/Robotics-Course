// Generated by gencpp from file arm_lib/Angles.msg
// DO NOT EDIT!


#ifndef ARM_LIB_MESSAGE_ANGLES_H
#define ARM_LIB_MESSAGE_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_lib
{
template <class ContainerAllocator>
struct Angles_
{
  typedef Angles_<ContainerAllocator> Type;

  Angles_()
    : arm1_angle(0.0)
    , arm2_angle(0.0)
    , arm3_angle(0.0)
    , arm4_angle(0.0)  {
    }
  Angles_(const ContainerAllocator& _alloc)
    : arm1_angle(0.0)
    , arm2_angle(0.0)
    , arm3_angle(0.0)
    , arm4_angle(0.0)  {
  (void)_alloc;
    }



   typedef float _arm1_angle_type;
  _arm1_angle_type arm1_angle;

   typedef float _arm2_angle_type;
  _arm2_angle_type arm2_angle;

   typedef float _arm3_angle_type;
  _arm3_angle_type arm3_angle;

   typedef float _arm4_angle_type;
  _arm4_angle_type arm4_angle;





  typedef boost::shared_ptr< ::arm_lib::Angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_lib::Angles_<ContainerAllocator> const> ConstPtr;

}; // struct Angles_

typedef ::arm_lib::Angles_<std::allocator<void> > Angles;

typedef boost::shared_ptr< ::arm_lib::Angles > AnglesPtr;
typedef boost::shared_ptr< ::arm_lib::Angles const> AnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_lib::Angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_lib::Angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_lib::Angles_<ContainerAllocator1> & lhs, const ::arm_lib::Angles_<ContainerAllocator2> & rhs)
{
  return lhs.arm1_angle == rhs.arm1_angle &&
    lhs.arm2_angle == rhs.arm2_angle &&
    lhs.arm3_angle == rhs.arm3_angle &&
    lhs.arm4_angle == rhs.arm4_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_lib::Angles_<ContainerAllocator1> & lhs, const ::arm_lib::Angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_lib

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_lib::Angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_lib::Angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_lib::Angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_lib::Angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_lib::Angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_lib::Angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_lib::Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1b7ee805afcab3ec788a0b100202f1a";
  }

  static const char* value(const ::arm_lib::Angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1b7ee805afcab3eULL;
  static const uint64_t static_value2 = 0xc788a0b100202f1aULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_lib::Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_lib/Angles";
  }

  static const char* value(const ::arm_lib::Angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_lib::Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 arm1_angle\n"
"float32 arm2_angle\n"
"float32 arm3_angle\n"
"float32 arm4_angle \n"
;
  }

  static const char* value(const ::arm_lib::Angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_lib::Angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm1_angle);
      stream.next(m.arm2_angle);
      stream.next(m.arm3_angle);
      stream.next(m.arm4_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_lib::Angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_lib::Angles_<ContainerAllocator>& v)
  {
    s << indent << "arm1_angle: ";
    Printer<float>::stream(s, indent + "  ", v.arm1_angle);
    s << indent << "arm2_angle: ";
    Printer<float>::stream(s, indent + "  ", v.arm2_angle);
    s << indent << "arm3_angle: ";
    Printer<float>::stream(s, indent + "  ", v.arm3_angle);
    s << indent << "arm4_angle: ";
    Printer<float>::stream(s, indent + "  ", v.arm4_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_LIB_MESSAGE_ANGLES_H
